import re
import requests
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='weather_bot.log'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "YOUR_TG_TOKEN"
YANDEX_WEATHER_API_KEY = "YOUR_YANDEX_WEATHER_TOKEN"

WEATHER_API_URL = "https://api.weather.yandex.ru/v2/forecast"
GEOCODER_URL = "https://nominatim.openstreetmap.org/search"
# –ë–∞–∑–æ–≤—ã–µ URL API


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"User {update.effective_user.id} started the bot")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        "/weather -location <–≥–æ—Ä–æ–¥> [-date <–¥–∞—Ç–∞> | -from <–¥–∞—Ç–∞> -to <–¥–∞—Ç–∞>] [-full]\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/weather -location –ú–æ—Å–∫–≤–∞ -date –∑–∞–≤—Ç—Ä–∞\n"
        "/weather -location –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ -from 2023-12-25 -to 2023-12-31 -=-full"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f"User {update.effective_user.id} requested help")
    help_text = (
        "üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "/weather --location <–≥–æ—Ä–æ–¥> [--date <–¥–∞—Ç–∞> | --from <–¥–∞—Ç–∞> --to <–¥–∞—Ç–∞>] [--full]\n\n"
        "üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        "--location: –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)\n"
        "--date: –¥–∞—Ç–∞ (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ YYYY-MM-DD)\n"
        "--from –∏ --to: –Ω–∞—á–∞–ª—å–Ω–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞\n"
        "--full: –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä–∞—Ç–∫–∏–π)\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä—ã:\n"
        "/weather --location –ú–æ—Å–∫–≤–∞ --date –∑–∞–≤—Ç—Ä–∞\n"
        "/weather -l –ö–∞–∑–∞–Ω—å -t 2023-12-31 -f\n"
        "/weather --location –°–æ—á–∏ --from 2023-12-25 --to 2023-12-31 --full"
    )
    await update.message.reply_text(help_text)


async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        logger.info(f"Weather command from {update.effective_user.id}: {update.message.text}")
        text = update.message.text

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        location_match = re.search(r'-(?:l|location)\s+([^-]+)', text) or re.search(r'-location\s+([^-]+)', text)
        date_match = re.search(r'-(?:t|date)\s+(\S+)', text) or re.search(r'-date\s+(\S+)', text)
        from_match = re.search(r'-from\s+(\S+)', text)
        to_match = re.search(r'-to\s+(\S+)', text)
        full_match = re.search(r'-(?:f|full)', text) or re.search(r'-full', text)

        location = location_match.group(1).strip() if location_match else None
        date = date_match.group(1) if date_match else None
        date_from = from_match.group(1) if from_match else None
        date_to = to_match.group(1) if to_match else None
        full = bool(full_match)

        if not location:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /weather --location –ú–æ—Å–∫–≤–∞")
            return

        if date_from and date_to:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–∏–æ–¥
            await get_weather_period(update, context, location, date_from, date_to, full)
        elif date:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            await get_weather(update, context, location, date, full)
        else:
            # –ó–∞–ø—Ä–æ—Å –±–µ–∑ –¥–∞—Ç—ã - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            await get_weather(update, context, location, "—Å–µ–≥–æ–¥–Ω—è", full)

    except Exception as e:
        logger.error(f"Error in weather_command: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def get_city_coordinates(city: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ Nominatim API"""
    try:
        params = {
            "city": city,
            "format": "json",
            "limit": 1,
            "accept-language": "ru"
        }
        headers = {
            "User-Agent": "TelegramWeatherBot/1.0"
        }

        logger.info(f"Geocoding request for city: {city}")
        response = requests.get(GEOCODER_URL, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        if not data:
            logger.warning(f"City not found: {city}")
            return None

        logger.info(f"Found coordinates for {city}: {data[0]['lat']}, {data[0]['lon']}")
        return {
            'lat': float(data[0]['lat']),
            'lon': float(data[0]['lon'])
        }
    except Exception as e:
        logger.error(f"Geocoding error for {city}: {str(e)}")
        return None


async def get_weather_data(coords: dict, days: int = 7):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å API"""
    try:
        headers = {
            "X-Yandex-API-Key": YANDEX_WEATHER_API_KEY
        }

        params = {
            "lat": coords['lat'],
            "lon": coords['lon'],
            "lang": "ru_RU",
            "limit": days,
            "hours": False,
            "extra": True
        }

        logger.info(f"Requesting weather data for coordinates: {coords}")
        response = requests.get(WEATHER_API_URL, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Weather API error: {str(e)}")
        return None


async def get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE, city: str, date: str, full: bool):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    try:
        logger.info(f"Weather request: city={city}, date={date}, full={full}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        coords = await get_city_coordinates(city)
        if not coords:
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_data = await get_weather_data(coords)
        if not weather_data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
        if date.lower() == '—Å–µ–≥–æ–¥–Ω—è':
            target_date = datetime.now().date()
        elif date.lower() == '–∑–∞–≤—Ç—Ä–∞':
            target_date = (datetime.now() + timedelta(days=1)).date()
        else:
            try:
                target_date = datetime.strptime(date, "%Y-%m-%d").date()
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, '—Å–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞'.")
                return

        # –ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
        forecast = None
        for day in weather_data['forecasts']:
            if datetime.strptime(day['date'], "%Y-%m-%d").date() == target_date:
                forecast = day
                break

        if not forecast:
            await update.message.reply_text(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if full:
            message = format_detailed_forecast(forecast, city, date)
        else:
            message = format_short_forecast(forecast, city, date)

        await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"Error in get_weather: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def get_weather_period(update: Update, context: ContextTypes.DEFAULT_TYPE,
                             city: str, date_from: str, date_to: str, full: bool):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        logger.info(f"Period weather request: city={city}, from={date_from}, to={date_to}, full={full}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        coords = await get_city_coordinates(city)
        if not coords:
            await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_data = await get_weather_data(coords)
        if not weather_data:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            from_date = datetime.strptime(date_from, "%Y-%m-%d").date()
            to_date = datetime.strptime(date_to, "%Y-%m-%d").date()

            if from_date > to_date:
                await update.message.reply_text("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.")
                return

            if (to_date - from_date).days > 30:
                await update.message.reply_text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 30 –¥–Ω–µ–π.")
                return
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –¥–∞—Ç–∞–º
        forecasts = []
        for day in weather_data['forecasts']:
            day_date = datetime.strptime(day['date'], "%Y-%m-%d").date()
            if from_date <= day_date <= to_date:
                forecasts.append(day)

        if not forecasts:
            await update.message.reply_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to}.")
            return

        if full:
            message = format_detailed_period_forecast(forecasts, city, date_from, date_to)
        else:
            message = format_short_period_forecast(forecasts, city, date_from, date_to)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        if len(message) > max_length:
            parts = [message[i:i + max_length] for i in range(0, len(message), max_length)]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(message)

    except Exception as e:
        logger.error(f"Error in get_weather_period: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def format_short_forecast(forecast, city, date):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ–¥–Ω—É –¥–∞—Ç—É"""
    day = forecast['parts']['day']
    night = forecast['parts']['night']

    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ {date}:\n"
        f"üåû –î–Ω–µ–º: {day['temp_avg']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {day['feels_like']}¬∞C)\n"
        f"‚òÅ {translate_condition(day['condition'])}, üíß{day['humidity']}%, üå¨ {day['wind_speed']} –º/—Å\n"
        f"üåô –ù–æ—á—å—é: {night['temp_avg']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {night['feels_like']}¬∞C)\n"
        f"‚òÅ {translate_condition(night['condition'])}, üíß{night['humidity']}%, üå¨ {night['wind_speed']} –º/—Å"
    )


def format_detailed_forecast(forecast, city, date):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ–¥–Ω—É –¥–∞—Ç—É"""
    day = forecast['parts']['day']
    night = forecast['parts']['night']

    message = [
        f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city} –Ω–∞ {date}:\n",
        f"\nüåû –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑:",
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temp_avg']}¬∞C (–º–∏–Ω {day['temp_min']}¬∞C, –º–∞–∫—Å {day['temp_max']}¬∞C)",
        f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {day['feels_like']}¬∞C",
        f"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {translate_condition(day['condition'])}",
        f"üå¨ –í–µ—Ç–µ—Ä: {day['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_wind_direction(day['wind_dir'])}",
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%",
        f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {day['pressure_mm']} –º–º —Ä—Ç. —Å—Ç.",
        f"üåß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['prec_prob']}%",
        f"\nüåô –ù–æ—á–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑:",
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {night['temp_avg']}¬∞C (–º–∏–Ω {night['temp_min']}¬∞C, –º–∞–∫—Å {night['temp_max']}¬∞C)",
        f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {night['feels_like']}¬∞C",
        f"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {translate_condition(night['condition'])}",
        f"üå¨ –í–µ—Ç–µ—Ä: {night['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_wind_direction(night['wind_dir'])}",
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {night['humidity']}%",
        f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {night['pressure_mm']} –º–º —Ä—Ç. —Å—Ç.",
        f"üåß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {night['prec_prob']}%"
    ]

    return "\n".join(message)


def format_short_period_forecast(forecasts, city, date_from, date_to):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥"""
    message = [f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city} —Å {date_from} –ø–æ {date_to}:\n"]

    for forecast in forecasts:
        date = forecast['date']
        day_name = datetime.strptime(date, "%Y-%m-%d").strftime("%A")
        day = forecast['parts']['day']

        message.append(
            f"\nüìÖ {date} ({day_name}):"
            f"\nüåû –î–Ω–µ–º: {day['temp_avg']}¬∞C, ‚òÅ {translate_condition(day['condition'])}"
            f"\nüåô –ù–æ—á—å—é: {forecast['parts']['night']['temp_avg']}¬∞C"
        )

    return "\n".join(message)


def format_detailed_period_forecast(forecasts, city, date_from, date_to):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥"""
    message = [f"üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ {city} —Å {date_from} –ø–æ {date_to}:\n"]

    for forecast in forecasts:
        date = forecast['date']
        day_name = datetime.strptime(date, "%Y-%m-%d").strftime("%A")
        day = forecast['parts']['day']
        night = forecast['parts']['night']

        message.append(
            f"\nüìÖ {date} ({day_name}):"
            f"\nüåû –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑:"
            f"\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['temp_avg']}¬∞C (–º–∏–Ω {day['temp_min']}¬∞C, –º–∞–∫—Å {day['temp_max']}¬∞C)"
            f"\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {day['feels_like']}¬∞C"
            f"\n‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {translate_condition(day['condition'])}"
            f"\nüå¨ –í–µ—Ç–µ—Ä: {day['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_wind_direction(day['wind_dir'])}"
            f"\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%"
            f"\nüìä –î–∞–≤–ª–µ–Ω–∏–µ: {day['pressure_mm']} –º–º —Ä—Ç. —Å—Ç."
            f"\nüåß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['prec_prob']}%"
            f"\n\nüåô –ù–æ—á–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑:"
            f"\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {night['temp_avg']}¬∞C (–º–∏–Ω {night['temp_min']}¬∞C, –º–∞–∫—Å {night['temp_max']}¬∞C)"
            f"\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {night['feels_like']}¬∞C"
            f"\n‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {translate_condition(night['condition'])}"
            f"\nüå¨ –í–µ—Ç–µ—Ä: {night['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_wind_direction(night['wind_dir'])}"
            f"\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {night['humidity']}%"
            f"\nüìä –î–∞–≤–ª–µ–Ω–∏–µ: {night['pressure_mm']} –º–º —Ä—Ç. —Å—Ç."
            f"\nüåß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {night['prec_prob']}%"
            f"\n{'-' * 30}"
        )

    return "\n".join(message)


def translate_condition(condition):
    """–ü–µ—Ä–µ–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    translations = {
        "clear": "—è—Å–Ω–æ",
        "partly-cloudy": "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
        "cloudy": "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
        "overcast": "–ø–∞—Å–º—É—Ä–Ω–æ",
        "light-rain": "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "rain": "–¥–æ–∂–¥—å",
        "heavy-rain": "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        "showers": "–ª–∏–≤–µ–Ω—å",
        "wet-snow": "–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
        "light-snow": "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
        "snow": "—Å–Ω–µ–≥",
        "snow-showers": "—Å–Ω–µ–≥–æ–ø–∞–¥",
        "hail": "–≥—Ä–∞–¥",
        "thunderstorm": "–≥—Ä–æ–∑–∞",
        "thunderstorm-with-rain": "–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π",
        "thunderstorm-with-hail": "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
    }
    return translations.get(condition, condition)


def get_wind_direction(wind_dir):
    """–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –∏–∑ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç"""
    directions = {
        "nw": "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
        "n": "—Å–µ–≤–µ—Ä–Ω—ã–π",
        "ne": "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
        "e": "–≤–æ—Å—Ç–æ—á–Ω—ã–π",
        "se": "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
        "s": "—é–∂–Ω—ã–π",
        "sw": "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
        "w": "–∑–∞–ø–∞–¥–Ω—ã–π",
        "c": "—à—Ç–∏–ª—å"
    }
    return directions.get(wind_dir.lower(), wind_dir)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("weather", weather_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Bot is starting...")
    application.run_polling()


if __name__ == "__main__":
    main()